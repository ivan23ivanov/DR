class Assistant {
  static const List<String> waterTempMessages = [
    'Нужни са следните елементи за успех - бавна и естествена проводка, съчетана с натурален профил и размер на примамката. При риболов на едри хищници е подходящо използването на едри примамки, тъй като рибите не искат да изразходват много енергия. Обратното важи за дребните риби.',
    'Този температурен диапазон е характерен за края на есента, зимата и началото на пролетта. Най-сигурният начин за улов на хищници са малките примамки в комбинация с бавна проводка и натурален цвят. Най-успешни са имитациите на малки рибки и червейчета, които "ровят" по дъното.',
    'При температура в този диапазон, използвай примамки с неутрална плаваемост или бавно и натурално пропадане във водния слой. Водата е започнала да се затопля / охлажда, следователно активността на рибите се сменя (съответно се подобрява / влошава). Според конкретните условия трябва да забързаш / забавиш скоростта на проводката си.',
    'Температурата на водата е оптимална за летните хищници. Има активност във всички водни слоеве, но предимно в средния. Използвай средни до едри примамки, поради високата активност, за да привлечеш вниманието на по-големите екземпляри.',
    'Температурата на водата е висока, дребните риби са активни близо до повърхността. Големите риби са активни предимно рано сутрин и късно следобед във всички водни слоеве. Може да опиташ повърхностни примамки.',
  ];

  static const List<String> depthMessages = [
    'Препоръчително е да поставите сонарното устройство на различно място. Дълбочината е малка за наличието на съществено количество риби.',
    'Дълбочината е средна, възможно е наличието на дребни риби в средните и повърхностни слоеве. В ранните часове на сутрината и късния следобед е възможна активност на по-едри хищници.',
    'При такава дълбочина могат да бъдат срещнати всякакви риби и то във всички слоеве. Това е най-благоприятната дълбочина за риболов на хищници през пролетта и началото на есента.',
    'Дълбочината е подходяща за използването на примамки, покриващи средните и дънни слоеве. Възможно е наличието на всякакви хищни риби.',
    'При голяма дълбочина като тази е най-вероятно да бъдат уловени хищни риби в дънните слоеве. Възможните видове са - костур, бяла риба, сом и понякога щука. Най-успешни са имитациите на рибки и други дънни обитатели.',
  ];

  static const String lowPressureMessage =
      'При стойност на атмосферното налягане под обичайната за географската локация е препоръчително използването на по-големи примамки, тъй като активността на рибите е кратка. При постепенно намаляване на налягането, активността намалява право пропорционално.';
  static const String highPressureMessage =
      'При стойност на атмосферното налягане над обичайната за географската локация, мирните риби се активизират и започват да търсят храна. Това кара и хищниците да излязат да ловуват. Колкото по-рязко е покачването, толкова по-голяма e активността.';
  static const int normalPressure = 50;

  static const String lowAirTemp =
      'При температура на въздуха под 15 °C, помисли за по-топло облекло, което да увеличи времето, което можеш да прекараш на водоема (следователно и шансовете ти да уловиш желаната риба). Погледни прогнозата за деня, за да разбереш за евентуални промени в атмосферните условия.';
  static const String highAirTemp =
      'При температура на въздуха над 16 °C се очаква да забележиш активност на насекоми, ларви и / или малки рибки. Наблюдавай поведението, цветовата гама и размерът им. Опитай се да избереш примамка, която максимално да наподобява плячката на хищните риби.';

  static const String waitingData = "Чакам данни...";

  static double? getVal(String param, String pattern) {
    if (param.isNotEmpty) {
      String val = param.split(pattern)[1];
      return double.parse(val.split(" ")[1].trim());
    }
    return null;
  }

  static String waterTempMessage(double? temp) {
    if (temp != null) {
      if (temp <= 0) {
        return waterTempMessages[0];
      } else if (temp <= 10) {
        return waterTempMessages[1];
      } else if (temp <= 20) {
        return waterTempMessages[2];
      } else if (temp <= 25) {
        return waterTempMessages[3];
      } else {
        return waterTempMessages[3];
      }
    }
    return waitingData;
  }

  static String waterDepthMessage(double? depth) {
    if (depth != null) {
      if (depth <= 1) {
        return depthMessages[0];
      } else if (depth <= 2) {
        return depthMessages[1];
      } else if (depth <= 3) {
        return depthMessages[2];
      } else if (depth <= 4) {
        return depthMessages[3];
      } else {
        return depthMessages[3];
      }
    }
    return waitingData;
  }

  static String pressureMessage(double? pressure) {
    if (pressure != null) {
      return pressure > normalPressure
          ? highPressureMessage
          : lowPressureMessage;
    }
    return waitingData;
  }

  static String airTempMessage(double? temp) {
    if (temp != null) {
      return temp > 16 ? highAirTemp : lowAirTemp;
    }
    return waitingData;
  }
}
