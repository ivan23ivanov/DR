#include <Arduino.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>

#define BME_SDA 6
#define BME_SCL 5
#define TRIG_PIN 2
#define ECHO_PIN 3
#define ONE_WIRE_BUS 4

#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

BLEServer* pServer;
BLECharacteristic* pCharacteristic;

Adafruit_BME280 bme;
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

class MyCallbacks : public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
    }
};

void setup() {
  // JSN-SR04
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // DS18B20
  sensors.begin();

  // BME280
  Wire.begin(BME_SDA, BME_SCL);
  if (!bme.begin(0x76, &Wire)) {
    // Handle BME280 initialization error if needed
    while (1);
  }

  // Bluetooth setup
  BLEDevice::init("BASS - Bulgarian Automated Smart Sonar");
  pServer = BLEDevice::createServer();
  BLEService *pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
  pCharacteristic->addDescriptor(new BLE2902());
  pCharacteristic->setCallbacks(new MyCallbacks());
  pService->start();

  BLEAdvertising *pAdvertising = pServer->getAdvertising();
  pAdvertising->start();
}

void loop() {
  // JSN-SR04T
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH);
  float depth = duration * 0.1482 / 2;

  if (depth != 0.00) {
    String depthStr = "Depth: " + String(depth, 2) + " cm";
    pCharacteristic->setValue(depthStr.c_str());
    pCharacteristic->notify();
  }

  delay(1000);

  // DS18B20 (Water Temperature)
  sensors.requestTemperatures();
  float waterTemperature = sensors.getTempCByIndex(0);

  if (waterTemperature != DEVICE_DISCONNECTED_C) {
    String waterTemperatureStr = "Water T: " + String(waterTemperature, 2) + " °C";
    pCharacteristic->setValue(waterTemperatureStr.c_str());
    pCharacteristic->notify();
  }

  delay(1000);

  // BME280 (Air Temperature and Air Pressure)
  float airTemperature = bme.readTemperature();
  float airPressure = bme.readPressure() / 100.0F;

  String airTemperatureStr = "Air T: " + String(airTemperature, 2) + " °C";
  String airPressureStr = "Press.: " + String(airPressure, 2) + " hPa";

  pCharacteristic->setValue(airTemperatureStr.c_str());
  pCharacteristic->notify();
  
  delay(1000);
  
  pCharacteristic->setValue(airPressureStr.c_str());
  pCharacteristic->notify();
  
  delay(5000);
}
